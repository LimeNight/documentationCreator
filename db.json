{
  "users": [
    {
      "id": 1,
      "username": "ivo",
      "email": "ivo@gmail.com",
      "password": "$2a$10$f5uHGslBF3Wq9WJp5Lt/puHOxNt/OgeWPZYb85/wF9fRLPy4qvfuS"
    },
    {
      "email": "tomi@gmail.com",
      "password": "$2a$10$0u5CJAJRBxt0LAPSIyCRvOyfH0fUqRWHw986Vzp4LNOkguwR0mPje",
      "username": "Tamás",
      "id": 2
    },
    {
      "email": "newuser@gmail.com",
      "password": "$2a$10$ZHmB8iKbXU16C4OR3uvGG.X0jYol6qRO.qVbxt5GCZyLeAy6RD7Q2",
      "username": "newuser",
      "id": 3
    },
    {
      "email": "banana@gmail.com",
      "password": "$2a$10$vgm1/i//Dwnp0pSeBhwIZuDnZl8uHC1LYMCWHU1dDB1LyC3AIe7h2",
      "username": "banán",
      "id": 4
    }
  ],
  "documentations": [
    {
      "id": 1,
      "userId": 1,
      "position": 1,
      "title": "ez is fasza lesz így",
      "mainMenuItems": [
        {
          "title": "első",
          "position": 1,
          "discriptions": [
            {
              "position": 1,
              "paragraph": "mit csinál ez a függvény\nconst register = async (form: IRegister): Promise<void> => {\n    await axios.post(\"http://localhost:3000/register\", form)\n    .then(() => { router.replace('/login') })\n    .catch(err => { console.log(err) })\n}"
            },
            {
              "position": 2,
              "paragraph": "\n\n// Ez a függvény egy aszinkron POST kéréssel regisztrál egy felhasználót a \"http://localhost:3000/register\" címre. Ha a regisztráció sikeres, akkor átirányítja a felhasználót a \"/login\" oldalra. Ha hiba történik, akkor kiírja a hibaüzenetet a konzol"
            }
          ],
          "subMenuItems": [
            {
              "title": "valódi csoda",
              "position": 1,
              "discriptions": [
                {
                  "position": 1,
                  "paragraph": "Fantasztikus helpeket kaptam!"
                }
              ]
            },
            {
              "title": "newest",
              "position": 2,
              "discriptions": [
                {
                  "position": 1,
                  "paragraph": ""
                }
              ]
            }
          ]
        }
      ],
      "discriptions": [
        {
          "position": 1,
          "paragraph": "This interface is used to define the methods for interacting with a document repository. The create() method is used to create a new document, the read() method is used to retrieve documents associated with a particular user, the update() method is used to update an existing document or a list of documents, and the delete() method is used to delete a document from the repository.."
        },
        {
          "position": 2,
          "paragraph": "készíts dokumentációt erről a kódról\nexport type Discription = {\n    paragraph: string,\n    position: number\n}\n\nexport type SubMenuItem = {\n    title:string,\n    position: number,\n    discriptions: Discription[]\n}\n\nexport type MainMenuItem = {\n    title:string,\n    position: number,\n    discriptions: Discription[],\n    subMenuItems: SubMenuItem[]\n}\n\nexport interface IDocumentation{\n    id: number,\n    userId: number,\n    position: number,\n    title: string,\n    discriptions: Discription[]\n    mainMenuItems: MainMenuItem[]\n}\n\nexport class Documentation implements IDocumentation{\n    constructor(\n        public id: number = 0,\n        public userId: number = 0,\n        public position: number = 0,\n        public title: string = 'new',\n        public discriptions: Discription[] = [],\n        public mainMenuItems: MainMenuItem[] = []\n    ){}\n}"
        },
        {
          "position": 3,
          "paragraph": "make a documentation from this code\nimport type { IDocumentation } from \"./documentation\"\nimport { ref } from \"vue\"\n\nexport interface ILoginForm{\n        email?: string,\n        password?: string\n}\n\nexport interface IRegister extends ILoginForm{\n        username?: string\n}\n\nexport interface IUser extends IRegister{\n        id?: number,\n        authenticate: boolean\n}\n\nexport class User implements IUser{\n        constructor(\n                public id : number = 0,\n                public username: string = '',\n                public email: string = '',\n                public password: string = '',\n                public documentations: IDocumentation[] = [],\n                public authenticate: boolean = false\n        ){}\n}\n\nexport const user = ref<User>(new User())"
        },
        {
          "position": 4,
          "paragraph": "/*\nThis code is for creating a User class and an interface for a login form and register form. \n\nThe User class implements the IUser interface, which extends the IRegister interface, which extends the ILoginForm interface. The User class has properties for id, username, email, password, documentations, and authenticate. The ILoginForm interface has properties for email and password, while the IRegister interface has properties for username, email, and password. \n\nThe code also creates a user variable that is a ref of type User. \n*/"
        },
        {
          "position": 5,
          "paragraph": "készíts dokumentációt erről a kódról\n<template>\n    <draggable :list=\"props.mainMenu.subMenuItems\" \n               itemKey=\"position\"\n               @change=\"calculatePosition(props.mainMenu.subMenuItems), \n               docRequest.update(<IDocumentation>selectedDocumentation)\" \n               :animation=\"300\">\n\n        <template #item=\"{ element: subMenu }\">\n\n            <div class=\"sub-container\">\n\n                <div class=\"title sub-menu-item\" @click=\"selectedDocumentationItem = subMenu\"> \n                    <p>{{ subMenu.title }}</p>\n                    <span @click=\"deleteSub(<IDocumentation>selectedDocumentation ,props.mainMenu, subMenu.position)\" class=\"del-btn\">-</span>\n                </div>\n                \n                <AddSubButton v-if=\"mainMenu.subMenuItems\" @addSub=\"addSub(<IDocumentation>selectedDocumentation, props.mainMenu, subMenu.position)\" />\n            </div>\n        </template>\n    </draggable>\n</template>\n\n<script setup lang=\"ts\">\nimport AddSubButton from './AddSubButtonComponent.vue';\nimport { docRequest } from '../models/requests';\nimport draggable from 'vuedraggable';\nimport \n{\n    addSub,\n    selectedDocumentation,\n    calculatePosition,\n    IDocumentation,\n    deleteSub,\n    selectedDocumentationItem\n} from '../models/documentation';\n\nconst props = defineProps(['mainMenu'])\n</script>"
        },
        {
          "position": 6,
          "paragraph": "A kód egy Vue.js komponenst definiál, amely lehetővé teszi a felhasználók számára, hogy a dokumentációs menüt rendezhessék. A komponens egy draggable komponenst használ, amely lehetővé teszi a felhasználók számára, hogy a dokumentációkat maguk helyezhessék el."
        }
      ]
    },
    {
      "id": 7,
      "userId": 3,
      "position": 1,
      "title": "jujjjj",
      "discriptions": [],
      "mainMenuItems": [
        {
          "title": "new",
          "position": 1,
          "discriptions": [
            {
              "position": 1,
              "paragraph": "vlaami yeee"
            }
          ],
          "subMenuItems": []
        },
        {
          "title": "was first",
          "position": 2,
          "discriptions": [
            {
              "position": 1,
              "paragraph": "vlaami yeee"
            }
          ],
          "subMenuItems": []
        }
      ]
    },
    {
      "id": 8,
      "userId": 3,
      "position": 3,
      "title": "Second Documentation",
      "discriptions": [],
      "mainMenuItems": [
        {
          "title": "new",
          "position": 1,
          "discriptions": [],
          "subMenuItems": []
        }
      ]
    },
    {
      "id": 9,
      "userId": 3,
      "position": 2,
      "title": "new",
      "discriptions": [],
      "mainMenuItems": [
        {
          "title": "new",
          "position": 1,
          "discriptions": [],
          "subMenuItems": []
        }
      ]
    },
    {
      "id": 12,
      "userId": 2,
      "position": 1,
      "title": "First Documentation",
      "discriptions": [
        {
          "position": 1,
          "paragraph": ""
        }
      ],
      "mainMenuItems": [
        {
          "title": "First Main",
          "position": 1,
          "discriptions": [],
          "subMenuItems": [
            {
              "title": "First Sub",
              "position": 1,
              "discriptions": []
            }
          ]
        },
        {
          "title": "Second Main",
          "position": 2,
          "discriptions": [],
          "subMenuItems": []
        }
      ]
    },
    {
      "id": 13,
      "userId": 2,
      "position": 2,
      "title": "Second Documenatiton",
      "discriptions": [],
      "mainMenuItems": [
        {
          "title": "Second Documenation First Main",
          "position": 1,
          "discriptions": [],
          "subMenuItems": [
            {
              "title": "newest",
              "position": 1,
              "discriptions": []
            },
            {
              "title": "Second Doc First Sub",
              "position": 2,
              "discriptions": []
            },
            {
              "title": "Second Doc Second Sub",
              "position": 3,
              "discriptions": []
            }
          ]
        }
      ]
    },
    {
      "id": 15,
      "userId": 4,
      "position": 0,
      "title": "első documentum",
      "discriptions": [],
      "mainMenuItems": [
        {
          "title": "második main",
          "position": 1,
          "discriptions": [],
          "subMenuItems": []
        },
        {
          "title": "elso main",
          "position": 2,
          "discriptions": [],
          "subMenuItems": []
        }
      ]
    },
    {
      "id": 16,
      "userId": 1,
      "position": 2,
      "title": "new",
      "discriptions": [],
      "mainMenuItems": [
        {
          "title": "new",
          "position": 1,
          "discriptions": [],
          "subMenuItems": [
            {
              "title": "ssdfhksdf",
              "position": 1,
              "discriptions": [
                {
                  "position": 1,
                  "paragraph": "\n\n// Ez a függvény egy aszinkron hívást tesz egy API-hoz, amely regisztrál egy felhasználót a megadott form adataival. Ha a regisztráció sikeres, akkor a felhasználó átirányításra kerül a bejelentkezési oldalra. Ha a regisztráció sikert"
                }
              ]
            },
            {
              "title": "newest",
              "position": 2,
              "discriptions": [
                {
                  "position": 1,
                  "paragraph": ""
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}